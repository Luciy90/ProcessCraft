// –ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

class OrdersModule {
    constructor(options = {}) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ü–∏–∏ –æ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º–æ–¥—É–ª–µ–π
        this.moduleId = options.moduleId || 'orders';
        this.meta = options.meta || {};
        this.loader = options.loader || null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
        this.db = null;
        this.currentOrder = null;
        this.filters = {
            status: '',
            customer: '',
            search: ''
        };
        
        console.log(`[${this.moduleId}] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–æ–¥—É–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º –º–æ–¥—É–ª–µ–π –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
     */
    async init() {
        try {
            console.log(`[${this.moduleId}] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.initDatabase();
            
            // –†–µ–Ω–¥–µ—Ä UI –º–æ–¥—É–ª—è
            this.render();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadData();
            
            console.log(`[${this.moduleId}] –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:`, error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async initDatabase() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Database
            if (window.Database) {
                this.db = new window.Database();
            } else {
                // Fallback: –∏–º–ø–æ—Ä—Ç Database –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                const { Database } = await import('../utils/database.js');
                this.db = new Database();
            }
            
            console.log(`[${this.moduleId}] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
            
        } catch (error) {
            console.warn(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:`, error);
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ë–î
            this.db = {
                getOrders: () => Promise.resolve([]),
                getCustomers: () => Promise.resolve([]),
                saveOrder: () => Promise.resolve({ success: true })
            };
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI –º–æ–¥—É–ª—è
     */
    render() {
        const moduleElement = document.getElementById(`${this.moduleId}-module`);
        
        if (!moduleElement) {
            console.error(`[${this.moduleId}] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.moduleId}-module`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const cfg = window.UI_CONFIG?.texts?.orders || {};
        const globalTexts = window.UI_CONFIG?.texts || {};
        
        moduleElement.innerHTML = `
            <div class="module-header">
                <h1>${this.meta.moduleName || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏'}</h1>
                <div class="module-actions">
                    <button id="new-order-btn" class="btn btn-primary">
                        <i class="icon">‚ûï</i> ${globalTexts.buttons?.new_order || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'}
                    </button>
                    <button id="export-orders-btn" class="btn btn-secondary">
                        <i class="icon">üì§</i> –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                </div>
            </div>

            <div class="orders-filters">
                <div class="filter-group">
                    <label>${cfg.filters?.status_label || '–°—Ç–∞—Ç—É—Å'}:</label>
                    <select id="status-filter">
                        <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                        <option value="new">${cfg.statuses?.new || '–ù–æ–≤—ã–π'}</option>
                        <option value="confirmed">${cfg.statuses?.confirmed || '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}</option>
                        <option value="in_production">${cfg.statuses?.in_production || '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ'}</option>
                        <option value="ready">${cfg.statuses?.ready || '–ì–æ—Ç–æ–≤'}</option>
                        <option value="shipped">${cfg.statuses?.shipped || '–û—Ç–≥—Ä—É–∂–µ–Ω'}</option>
                        <option value="cancelled">${cfg.statuses?.cancelled || '–û—Ç–º–µ–Ω–µ–Ω'}</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>${cfg.filters?.customer_label || '–ö–ª–∏–µ–Ω—Ç'}:</label>
                    <select id="customer-filter">
                        <option value="">–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>–ü–æ–∏—Å–∫:</label>
                    <input type="text" id="search-orders" placeholder="${cfg.filters?.search_placeholder || '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞...'}">
                </div>
            </div>

            <div class="orders-table-container">
                <table id="orders-table" class="data-table">
                    <thead>
                        <tr>
                            <th>${cfg.columns?.order_no || '‚Ññ –ó–∞–∫–∞–∑–∞'}</th>
                            <th>${cfg.columns?.customer || '–ö–ª–∏–µ–Ω—Ç'}</th>
                            <th>${cfg.columns?.product || '–ü—Ä–æ–¥—É–∫—Ç'}</th>
                            <th>${cfg.columns?.qty || '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}</th>
                            <th>${cfg.columns?.status || '–°—Ç–∞—Ç—É—Å'}</th>
                            <th>${cfg.columns?.created_at || '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'}</th>
                            <th>${cfg.columns?.deadline || '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}</th>
                            <th>${cfg.columns?.actions || '–î–µ–π—Å—Ç–≤–∏—è'}</th>
                        </tr>
                    </thead>
                    <tbody id="orders-tbody">
                        <tr>
                            <td colspan="8" class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ -->
            <div id="order-modal" class="modal hidden">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 id="order-modal-title">${globalTexts.buttons?.new_order || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'}</h2>
                        <button class="close-btn" data-action="close-modal">‚úï</button>
                    </div>
                    <form id="order-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="order-number">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</label>
                                <input type="text" id="order-number" required>
                            </div>
                            <div class="form-group">
                                <label for="order-date">–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</label>
                                <input type="date" id="order-date" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="customer-select">–ö–ª–∏–µ–Ω—Ç:</label>
                                <select id="customer-select" required>
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="delivery-date">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
                                <input type="date" id="delivery-date" required>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="product-name">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</label>
                            <input type="text" id="product-name" required>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                                <input type="number" id="quantity" min="1" required>
                            </div>
                            <div class="form-group">
                                <label for="unit-price">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</label>
                                <input type="number" id="unit-price" step="0.01" min="0">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="order-description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                            <textarea id="order-description" rows="3"></textarea>
                        </div>

                        <div class="form-group">
                            <label for="order-status">–°—Ç–∞—Ç—É—Å:</label>
                            <select id="order-status">
                                <option value="new">${cfg.statuses?.new || '–ù–æ–≤—ã–π'}</option>
                                <option value="confirmed">${cfg.statuses?.confirmed || '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}</option>
                                <option value="in_production">${cfg.statuses?.in_production || '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ'}</option>
                                <option value="ready">${cfg.statuses?.ready || '–ì–æ—Ç–æ–≤'}</option>
                                <option value="shipped">${cfg.statuses?.shipped || '–û—Ç–≥—Ä—É–∂–µ–Ω'}</option>
                                <option value="cancelled">${cfg.statuses?.cancelled || '–û—Ç–º–µ–Ω–µ–Ω'}</option>
                            </select>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">${globalTexts.buttons?.save || '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                            <button type="button" class="btn btn-secondary" data-action="close-modal">${globalTexts.buttons?.cancel || '–û—Ç–º–µ–Ω–∞'}</button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        console.log(`[${this.moduleId}] UI –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const newOrderBtn = document.getElementById('new-order-btn');
        if (newOrderBtn) {
            newOrderBtn.addEventListener('click', () => this.openOrderModal());
        }

        // –§–∏–ª—å—Ç—Ä—ã
        const statusFilter = document.getElementById('status-filter');
        if (statusFilter) {
            statusFilter.addEventListener('change', () => this.filterOrders());
        }

        const customerFilter = document.getElementById('customer-filter');
        if (customerFilter) {
            customerFilter.addEventListener('change', () => this.filterOrders());
        }

        const searchInput = document.getElementById('search-orders');
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterOrders());
        }

        // –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞
        const orderForm = document.getElementById('order-form');
        if (orderForm) {
            orderForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveOrder();
            });
        }

        // –≠–∫—Å–ø–æ—Ä—Ç
        const exportBtn = document.getElementById('export-orders-btn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportOrders());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.addEventListener('click', (e) => {
            if (e.target.dataset.action === 'close-modal') {
                this.closeOrderModal();
            }
        });

        console.log(`[${this.moduleId}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è
     */
    async loadData() {
        try {
            console.log(`[${this.moduleId}] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...`);
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            await this.loadOrders();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            await this.loadCustomers();
            
            console.log(`[${this.moduleId}] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
            
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:`, error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
     */
    async loadOrders() {
        try {
            const orders = await this.db.getOrders();
            this.renderOrdersTable(orders);
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:`, error);
            this.renderOrdersTable([]);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    async loadCustomers() {
        try {
            const customers = await this.db.getCustomers();
            this.populateCustomerSelects(customers);
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:`, error);
            this.populateCustomerSelects([]);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
     * @param {Array} orders –ú–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
     */
    renderOrdersTable(orders) {
        const tbody = document.getElementById('orders-tbody');
        if (!tbody) return;

        if (orders.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center">
                        ${window.UI_CONFIG?.texts?.orders?.no_data || '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤'}
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = orders.map(order => `
            <tr data-order-id="${order.id}">
                <td>${order.number}</td>
                <td>${order.customer_name}</td>
                <td>${order.product_name}</td>
                <td>${order.quantity}</td>
                <td>
                    <span class="status-badge status-${order.status}">
                        ${this.getStatusText(order.status)}
                    </span>
                </td>
                <td>${this.formatDate(order.created_at)}</td>
                <td>${this.formatDate(order.deadline)}</td>
                <td>
                    <button class="btn btn-sm btn-secondary" onclick="window.getModuleInstance('${this.moduleId}').editOrder('${order.id}')">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
     * @param {Array} customers –ú–∞—Å—Å–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    populateCustomerSelects(customers) {
        const customerFilter = document.getElementById('customer-filter');
        const customerSelect = document.getElementById('customer-select');
        
        const customerOptions = customers.map(customer => 
            `<option value="${customer.id}">${customer.name}</option>`
        ).join('');
        
        if (customerFilter) {
            customerFilter.innerHTML = '<option value="">–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã</option>' + customerOptions;
        }
        
        if (customerSelect) {
            customerSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>' + customerOptions;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
     * @param {string} status –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
     * @returns {string} –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusText(status) {
        const statuses = window.UI_CONFIG?.texts?.orders?.statuses || {};
        return statuses[status] || status;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {string} dateString –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(dateString) {
        if (!dateString) return '-';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU');
        } catch (error) {
            return dateString;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
     */
    filterOrders() {
        this.filters.status = document.getElementById('status-filter')?.value || '';
        this.filters.customer = document.getElementById('customer-filter')?.value || '';
        this.filters.search = document.getElementById('search-orders')?.value || '';
        
        console.log(`[${this.moduleId}] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:`, this.filters);
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        this.loadOrders();
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞
     * @param {Object} order –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     */
    openOrderModal(order = null) {
        const modal = document.getElementById('order-modal');
        const title = document.getElementById('order-modal-title');
        
        if (!modal) return;
        
        if (order) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞';
            this.fillOrderForm(order);
        } else {
            title.textContent = window.UI_CONFIG?.texts?.buttons?.new_order || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑';
            this.clearOrderForm();
        }
        
        modal.classList.remove('hidden');
        console.log(`[${this.moduleId}] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–∫—Ä—ã—Ç–æ`);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞
     */
    closeOrderModal() {
        const modal = document.getElementById('order-modal');
        if (modal) {
            modal.classList.add('hidden');
            this.clearOrderForm();
        }
        console.log(`[${this.moduleId}] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–æ`);
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã–º–∏
     * @param {Object} order –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
     */
    fillOrderForm(order) {
        document.getElementById('order-number').value = order.number || '';
        document.getElementById('order-date').value = order.order_date || '';
        document.getElementById('customer-select').value = order.customer_id || '';
        document.getElementById('delivery-date').value = order.deadline || '';
        document.getElementById('product-name').value = order.product_name || '';
        document.getElementById('quantity').value = order.quantity || '';
        document.getElementById('unit-price').value = order.unit_price || '';
        document.getElementById('order-description').value = order.description || '';
        document.getElementById('order-status').value = order.status || 'new';
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
     */
    clearOrderForm() {
        const form = document.getElementById('order-form');
        if (form) {
            form.reset();
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            document.getElementById('order-date').value = new Date().toISOString().split('T')[0];
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     */
    async saveOrder() {
        try {
            const formData = this.getOrderFormData();
            
            console.log(`[${this.moduleId}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:`, formData);
            
            const result = await this.db.saveOrder(formData);
            
            if (result.success) {
                this.showSuccess('–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                this.closeOrderModal();
                this.loadOrders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            } else {
                this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
            }
            
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:`, error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
     */
    getOrderFormData() {
        return {
            number: document.getElementById('order-number').value,
            order_date: document.getElementById('order-date').value,
            customer_id: document.getElementById('customer-select').value,
            deadline: document.getElementById('delivery-date').value,
            product_name: document.getElementById('product-name').value,
            quantity: parseInt(document.getElementById('quantity').value) || 0,
            unit_price: parseFloat(document.getElementById('unit-price').value) || 0,
            description: document.getElementById('order-description').value,
            status: document.getElementById('order-status').value
        };
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     * @param {string} orderId ID –∑–∞–∫–∞–∑–∞
     */
    async editOrder(orderId) {
        try {
            const order = await this.db.getOrder(orderId);
            if (order) {
                this.openOrderModal(order);
            } else {
                this.showError('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
     */
    exportOrders() {
        console.log(`[${this.moduleId}] –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤`);
        this.showInfo('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showSuccess(message) {
        if (window.app && typeof window.app.showMessage === 'function') {
            window.app.showMessage(message, 'success');
        } else {
            alert(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showError(message) {
        if (window.app && typeof window.app.showMessage === 'function') {
            window.app.showMessage(message, 'error');
        } else {
            alert(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showInfo(message) {
        if (window.app && typeof window.app.showMessage === 'function') {
            window.app.showMessage(message, 'info');
        } else {
            alert(message);
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è (–¥–ª—è hot-reload)
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
     */
    async destroy() {
        try {
            console.log(`[${this.moduleId}] –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è`);
            
            // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            // (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è)
            
            // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            // clearInterval(this.someInterval);
            
            // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            this.db = null;
            this.currentOrder = null;
            
            console.log(`[${this.moduleId}] –ú–æ–¥—É–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
            
        } catch (error) {
            console.error(`[${this.moduleId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª—è:`, error);
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ .meta.json)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º –µ—Å–ª–∏ –Ω–µ—Ç .meta.json —Ñ–∞–π–ª–∞
     */
    static get meta() {
        return {
            moduleId: 'orders',
            moduleName: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏',
            version: '1.0.0',
            description: '–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
            dependencies: ['database'],
            author: 'ProcessCraft Team',
            enabled: true
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è ES6 import
export default OrdersModule;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.OrdersModule = OrdersModule;