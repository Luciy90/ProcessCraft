// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username, displayName, avatarPath
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} options.size - –ö–ª–∞—Å—Å —Ä–∞–∑–º–µ—Ä–∞ (sm, md, lg, xl)
 * @param {boolean} options.checkFileExists - –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞
 * @returns {Promise<string>} HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
 */
async function generateAvatarHTML(user, options = {}) {
  const {
    size = 'md',
    checkFileExists = true
  } = options;

  if (!user) {
    return generateFallbackAvatar('?', size);
  }

  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
  const sizeMap = {
    sm: { container: 'h-9 w-9', text: 'text-sm' },
    md: { container: 'h-16 w-16', text: 'text-2xl' },
    lg: { container: 'h-24 w-24 md:h-28 md:w-28', text: 'text-4xl md:text-5xl' },
    xl: { container: 'h-32 w-32', text: 'text-6xl' }
  };

  const sizeConfig = sizeMap[size] || sizeMap.md;


  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
  if (user.avatarPath && checkFileExists) {
    const fileExists = await window.UserStore.checkAvatarFileExists(user.avatarPath);
    if (fileExists) {
      return `<img src="${user.avatarPath}" class="${sizeConfig.container} object-cover">`;
    }
  } else if (user.avatarPath && !checkFileExists) {
    // –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    return `<img src="${user.avatarPath}" class="${sizeConfig.container} object-cover">`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
  return await generateColoredLetterAvatar(user, sizeConfig);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} sizeConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
 * @returns {Promise<string>} HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
 */
async function generateColoredLetterAvatar(user, sizeConfig) {
  const firstLetter = (user.displayName || user.username || '?').charAt(0).toUpperCase();
  
  try {
    const color = await window.UserStore.getAvatarColor(user.username);
    const textColor = `hsl(${color.hue}, ${color.saturation}%, ${color.brightness}%)`;
    
    return `<div class="${sizeConfig.container} flex items-center justify-center font-semibold ${sizeConfig.text}" style="color: ${textColor}; background-color: transparent;">${firstLetter}</div>`;
  } catch (error) {
    console.warn('Failed to get avatar color:', error);
    return generateFallbackAvatar(firstLetter, sizeConfig);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —Å–æ —Å—Ç–∏–ª–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @param {string} letter - –ë—É–∫–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object|string} sizeConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –∫–ª—é—á —Ä–∞–∑–º–µ—Ä–∞
 * @returns {string} HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
 */
function generateFallbackAvatar(letter, sizeConfig) {
  let config;
  if (typeof sizeConfig === 'string') {
    const sizeMap = {
      sm: { container: 'h-9 w-9', text: 'text-sm' },
      md: { container: 'h-16 w-16', text: 'text-2xl' },
      lg: { container: 'h-24 w-24 md:h-28 md:w-28', text: 'text-4xl md:text-5xl' },
      xl: { container: 'h-32 w-32', text: 'text-6xl' }
    };
    config = sizeMap[sizeConfig] || sizeMap.md;
  } else {
    config = sizeConfig;
  }

  return `<div class="${config.container} flex items-center justify-center font-semibold ${config.text}" style="color: #6b7280; background-color: transparent;">${letter}</div>`;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ DOM
 * @param {string} selector - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function updateAvatarInDOM(selector, user, options = {}) {
  const element = document.querySelector(selector);
  if (!element) {
    console.warn(`Avatar container not found: ${selector}`);
    return;
  }

  try {
    const avatarHTML = await generateAvatarHTML(user, options);
    element.innerHTML = avatarHTML;
  } catch (error) {
    console.error('Failed to update avatar:', error);
    element.innerHTML = generateFallbackAvatar('?', options.size || 'md');
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
 * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<string>} HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
 */
async function generateTopBarAvatar(user) {
  if (!user) {
    return 'üë§';
  }

  if (user.avatarPath) {
    const fileExists = await window.UserStore.checkAvatarFileExists(user.avatarPath);
    if (fileExists) {
      return user.avatarPath; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –¥–ª—è img.src
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–π –±—É–∫–≤—ã
  const firstLetter = (user.displayName || user.username || '?').charAt(0).toUpperCase();
  try {
    const color = await window.UserStore.getAvatarColor(user.username);
    return {
      letter: firstLetter,
      color: `hsl(${color.hue}, ${color.saturation}%, ${color.brightness}%)`
    };
  } catch (error) {
    console.warn('Failed to get avatar color:', error);
    return {
      letter: firstLetter,
      color: '#6b7280'
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
  generateAvatarHTML,
  generateColoredLetterAvatar,
  generateFallbackAvatar,
  updateAvatarInDOM,
  generateTopBarAvatar
};

try {
  if (typeof window !== 'undefined') {
    window.AvatarUtils = window.AvatarUtils || {};
    window.AvatarUtils.generateAvatarHTML = window.AvatarUtils.generateAvatarHTML || generateAvatarHTML;
    window.AvatarUtils.generateColoredLetterAvatar = window.AvatarUtils.generateColoredLetterAvatar || generateColoredLetterAvatar;
    window.AvatarUtils.generateFallbackAvatar = window.AvatarUtils.generateFallbackAvatar || generateFallbackAvatar;
    window.AvatarUtils.updateAvatarInDOM = window.AvatarUtils.updateAvatarInDOM || updateAvatarInDOM;
    window.AvatarUtils.generateTopBarAvatar = window.AvatarUtils.generateTopBarAvatar || generateTopBarAvatar;
  }
} catch (e) {
}