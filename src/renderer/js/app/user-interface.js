// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
// –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

import { generateTopBarAvatar } from '../utils/avatarUtils.js';

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * @param {Object} app –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function updateUserInterface(app) {
    const current = window.UserStore?.getCurrentUser();
    const userBtn = document.getElementById('user-btn');
    const loginBtn = document.getElementById('login-btn');
    
    if (current) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        if (userBtn) userBtn.classList.remove('hidden');
        if (loginBtn) loginBtn.classList.add('hidden');
        await app.renderUserAvatar();
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Å–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        if (userBtn) userBtn.classList.add('hidden');
        if (loginBtn) loginBtn.classList.remove('hidden');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} app –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function renderUserAvatar(app) {
    const current = window.UserStore?.getCurrentUser();
    const img = document.getElementById('user-avatar');
    const fallback = document.getElementById('user-avatar-fallback');
    if (!img || !fallback) return;

    try {
        // Use module function to get avatar for top bar
        const avatarData = await generateTopBarAvatar(current);
        
        if (typeof avatarData === 'string') {
            // Image path
            img.src = avatarData;
            img.classList.remove('hidden');
            fallback.classList.add('hidden');
        } else if (avatarData && typeof avatarData === 'object') {
            // Colored letter
            fallback.textContent = avatarData.letter;
            fallback.style.backgroundColor = 'transparent';
            fallback.style.color = avatarData.color;
            fallback.style.fontWeight = '600';
            img.classList.add('hidden');
            fallback.classList.remove('hidden');
        } else {
            // Not authenticated
            fallback.textContent = 'üë§';
            fallback.style.backgroundColor = '';
            fallback.style.color = '';
            fallback.style.fontWeight = '';
            img.classList.add('hidden');
            fallback.classList.remove('hidden');
        }
    } catch (error) {
        console.error('Failed to render user avatar:', error);
        fallback.textContent = 'üë§';
        fallback.style.backgroundColor = '';
        fallback.style.color = '';
        fallback.style.fontWeight = '';
        img.classList.add('hidden');
        fallback.classList.remove('hidden');
    }
}